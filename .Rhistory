#Sub-sampling proportions to simulate
# sample proportion is number of ppl that were sampled
samp_prop <- seq(from = .95, to = 0.2, by = -0.05)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
check_cmdstan_toolchain()
library(cmdstanr)
library(posterior)
library(bayesplot)
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
knitr::opts_chunk$set(echo = TRUE)
months <- c("April","May","June",
"July","August","September",
"October", "November", "December",
"January", "February", "March")
players <- c(35,28,30,32,27,23,25,20,21,15,12,10)
RA <- c(0,1,2,3,4,5,6,7,8,9,10,11)
# US_tot <- 4265555
# US_births <- c(329809,355437,358251,367934,387798,374711,367354,351832,356111,340297,319235,356786)
# birth_rate <- US_births/US_tot
#
# births <- US_births/US_tot*840800*.51
# #48.8% men
#Read in Japan Data from CSV
japan_births <- read.csv("UNdata_Export_20211205_201842295.csv")
#Aggregate by month
agg_births <- aggregate(japan_births$Value, by=list(Category=japan_births$Month), FUN=sum)
colnames(agg_births) <- c("Month","Births")
#Find total males born
agg_births$Births <- agg_births$Births *0.488
#Arrange April to March
agg_births <- agg_births %>% arrange(factor(Month, levels = months))
library(dplyr)
library(dplyr)
months <- c("April","May","June",
"July","August","September",
"October", "November", "December",
"January", "February", "March")
players <- c(35,28,30,32,27,23,25,20,21,15,12,10)
RA <- c(0,1,2,3,4,5,6,7,8,9,10,11)
# US_tot <- 4265555
# US_births <- c(329809,355437,358251,367934,387798,374711,367354,351832,356111,340297,319235,356786)
# birth_rate <- US_births/US_tot
#
# births <- US_births/US_tot*840800*.51
# #48.8% men
#Read in Japan Data from CSV
japan_births <- read.csv("UNdata_Export_20211205_201842295.csv")
#Aggregate by month
agg_births <- aggregate(japan_births$Value, by=list(Category=japan_births$Month), FUN=sum)
colnames(agg_births) <- c("Month","Births")
#Find total males born
agg_births$Births <- agg_births$Births *0.488
#Arrange April to March
agg_births <- agg_births %>% arrange(factor(Month, levels = months))
agg_births <- head(agg_births,-2)
#
births <- agg_births$Births
model = stan_model("stan_model.stan")
library(rstan)
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
thin = 100,
warmup = 5000)
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
thin = 100,
warmup = 5000)
fit
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
model = cmdstanr::cmdstan_model(stan_file = "stan_model.stan")
model
library(cmdstanr)
fit <- model$sample(
data = data_stan,
chains = 1,
refresh = 500,
adapt_delta = 0.9,
max_treedepth = 15,
iter_warmup = 5000,
iter_sampling = 20000
)
fit
?model$sample
?$sample
?model
?cmdstan_model
fit(max_rows = 20)
fit[11:20]
fit
fit$cmdstan_diagnose()
fit$cmdstan_summary()
fit$cmdstan_summary()
rstan:::rstudio_stanc("stan_model.stan")
model = stan_model("stan_model.stan")
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 5000,
thin = 1)
rstan:::rstudio_stanc("stan_model.stan")
getOption(mc.cores)
detectCores
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
warmup = 5000,
cores = 6)
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
warmup = 5000,
cores = 6)
rstan:::rstudio_stanc("stan_model.stan")
rstan:::rstudio_stanc("stan_model.stan")
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
warmup = 5000,
cores = 6)
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
fit
model = cmdstan_model(stan_file = "stan_model.stan")
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
adapt_delta = 0.99,
max_treedepth = 10,
iter_warmup = 5000,
iter_sampling = 20000
)
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
adapt_delta = 0.99,
max_treedepth = 10,
iter_warmup = 5000,
iter_sampling = 20000
)
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
adapt_delta = 0.99,
max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 20000
)
model = cmdstan_model(stan_file = "stan_model.stan")
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
adapt_delta = 0.99,
max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 20000
)
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
#adapt_delta = 0.99,
#max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 20000
)
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 5000,
adapt_delta = 0.99,
max_treedepth = 15,
iter_warmup = 5000,
iter_sampling = 20000
)
rstan:::rstudio_stanc("stan_model.stan")
model = cmdstan_model(stan_file = "stan_model.stan")
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 500,
adapt_delta = 0.9,
max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 5000
)
rstan:::rstudio_stanc("stan_model.stan")
model = cmdstan_model(stan_file = "stan_model.stan")
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 500,
adapt_delta = 0.9,
max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 5000
)
model = stan_model("stan_model.stan")
library(parallel)
detectCores()
?detectCores
detectCores(logical = T)
detectCores(logical = F)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
warmup = 5000,
cores = parallel::detectCores())
model = cmdstan_model(stan_file = "stan_model.stan")
rstan:::rstudio_stanc("stan_model.stan")
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 5,
iter = 25000,
warmup = 5000,
cores = parallel::detectCores())
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots") +
facet_wrap(~Chain)
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots") +
facet_wrap(~chain)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 25000,
warmup = 5000,
cores = parallel::detectCores())
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
fit
rstan:::rstudio_stanc("stan_model.stan")
rstan:::rstudio_stanc("stan_model.stan")
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 25000,
warmup = 5000,
cores = parallel::detectCores())
model = cmdstan_model(stan_file = "stan_model.stan")
fit <- model$sample(
data = data_stan,
chains = 5,
parallel_chains = 5,
refresh = 500,
adapt_delta = 0.8,
max_treedepth = 10,
iter_warmup = 5000,
iter_sampling = 5000
)
fit <- model$sample(
data = data_stan,
chains = 1,
parallel_chains = 5,
refresh = 500,
adapt_delta = 0.8,
max_treedepth = 10,
iter_warmup = 5000,
iter_sampling = 5000
)
fit <- model$sample(
data = data_stan,
chains = 1,
parallel_chains = 5,
refresh = 500,
adapt_delta = 0.9,
max_treedepth = 20,
iter_warmup = 5000,
iter_sampling = 5000
)
fit$summary()
fit$plot()
fit$traceplot()
fit
fit$cmdstan_diagnose()
fit$summary()
fit$cmdstan_summary()
knitr::opts_chunk$set(echo = TRUE)
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 5000,
warmup = 2000,
cores = parallel::detectCores())
library(rstan)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 5000,
warmup = 2000,
cores = parallel::detectCores())
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
fit
model = stan_model("stan_model.stan")
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 5000,
warmup = 2000,
cores = parallel::detectCores())
?shinystan
install.packages("shinystan")
library(shinystan)
launch_shinystan(fit)
model
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 5000,
warmup = 2000,
cores = parallel::detectCores())
launch_shinystan(fit)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 5000,
warmup = 2000,
cores = parallel::detectCores())
knitr::opts_chunk$set(echo = TRUE)
fit
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 10000,
warmup = 4000,
cores = parallel::detectCores(), control = list())
library(rstan)
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 10000,
warmup = 4000,
cores = parallel::detectCores(), control = list())
rstan:::rstudio_stanc("stan_model.stan")
model = stan_model("stan_model.stan")
# model
data_stan <- list(I = 12, y = players, births = births, RA = RA)
fit = stan(file = "stan_model.stan",
data = data_stan,
chains = 1,
iter = 10000,
warmup = 4000,
cores = parallel::detectCores(), control = list())
fit
# fit
stan_trace(fit, pars = c("alpha", "beta")) +
labs(title = "Traceplots")
fit
